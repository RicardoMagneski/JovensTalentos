# -*- coding: utf-8 -*-
"""TecnicoOO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IdN0EFMeTZXVUg_yp-otvbcPf0wv19gG
"""



"""CATÁLOGO DE VENDA

O cliente deve adquirir produtos de um catálogo, com os preços de vendas pré-definidos e com descontos à vista conforme a sua categoria. O vendedor deve encomendar os produtos, onde a cada compra você pode ter ter diversos produtos e suas respectivas quantidades. Ao fazer as encomendas, o vendedor paga pelo valor unitário ou custo, e também há uma tabela de desconto do valor total por faixa. O estoque de cada produto encomendado deve ser atualizado a cada item adicionado à encomenda.
Os clientes fazem os pedidos com seus respectivos produtos e quantidade. A cada produto adicionado ao pedido, o estoque deve ser atualizado e o saldo devedor do cliente deve constar saldo atualizado. O cliente pode efetuar o pagamento à vista com desconto variáveis por categoria até o vencimento. Os pagamentos devem ser deduzidos do saldo devedor do cliente.
"""

import gc
import datetime as dt
from dateutil.relativedelta import relativedelta
from abc import ABC, abstractmethod

class Faixa():
    
    def __init__(self, valor_minimo, valor_maximo, desconto):
        self.valor_minimo = valor_minimo
        self.valor_maximo = valor_maximo
        self.__desconto = desconto

    def get_desconto(self):
        return self.__desconto

    def get_all_faixas(valor):
        desconto = 0
        for faixa in gc.get_objects():
            if isinstance(faixa, Faixa):
                if (valor < faixa.valor_maximo) & (valor >= faixa.valor_minimo):
                    desconto = faixa.__desconto 
        return (desconto / 100)    

class Categoria():

    def __init__(self, descricao, desconto):
        self.descricao = descricao
        self.__desconto = desconto

    def get_desconto(self):
        return self.__desconto

    def set_desconto(self, desconto):
        self.__desconto = desconto

class Produto(ABC):
  
    def __init__(self, descricao, categoria, preco, valorunitario):
        self.descricao = descricao
        self.__valorunitario = preco
        self.__preco = valorunitario
        self.__estoque = 0
        self.categoria = categoria

    def get_estoque(self):
        return self.__estoque

    def set_estoque(self, estoque):
        self.__estoque = estoque

    def get_preco(self):
        return self.__preco

    def get_valorunitario(self):
        return self.__valorunitario


    # def atualiza_estoque(self, operacao, quantidade):
    #     if operacao == 'Entrada':
    #         self.__estoque += quantidade
    #     elif operacao == 'Saida':
    #         self.__estoque -= quantidade
    #     else:
    #         print('Tipo de Operação inválida')
    #     return self.__estoque

    @abstractmethod
    def atualiza_estoque(self, quantidade):
        pass

class ProdutoRegistrado(Produto):

    def atualiza_estoque(self, quantidade):
        pass

class ProdutoEncomendado(Produto):

    def atualiza_estoque(self, quantidade):
        self.set_estoque(self.get_estoque() + quantidade)  

class ProdutoVendido(Produto):

    def atualiza_estoque(self, quantidade):
        self.set_estoque(self.get_estoque() - quantidade)

## Faixas
faixa1 = Faixa(0, 500, 0.00)
faixa2 = Faixa(500, 1000, 5.00)
faixa3 = Faixa(1000, 1500, 10.00)
faixa4 = Faixa(1500, 2000, 15.00)
faixa5 = Faixa(2000, 10000, 20.00)

## Categorias
categoria1 = Categoria('Cosméticos', 5.00)
categoria2 = Categoria('Higiene Pessoal', 10.00)
categoria3 = Categoria('Perfume', 15.00)

## Produtos
produto1 = ProdutoRegistrado('Creme Facial', categoria1, 50.00, 25.00)
produto2 = ProdutoRegistrado('Shampoo', categoria2, 8.00, 4.00)
produto3 = ProdutoRegistrado('Cheiro do Campo', categoria3, 40.00, 20.00)

class Encomenda():

    def __init__(self):
        self.__data = dt.date.today()
        self.__valor = 0.00
        self.__situacao = 'Aberto'

    def get_data(self):
        return self.__data    

    def get_valor(self):
        return self.__valor    

    def get_situacao(self):
        return self.__situacao   

    def atualiza_valor(self, valor):
        self.__valor += valor

    def concluir_encomenda(self):    
        self.__valor = self.__valor * (1 - Faixa.get_all_faixas(self.__valor))
        self.__situacao = 'Fechado'

class EncomendaItem():

    def __init__(self, encomenda, produto, quantidade):
        self.encomenda = encomenda
        self.produto = produto
        self.__quantidade = quantidade
        self.__valorunitario = produto.get_valorunitario()
        self.__valor = quantidade * produto.get_valorunitario()
        Encomenda.atualiza_valor(encomenda, self.__valor)
        # Produto.atualiza_estoque(produto, 'Entrada', quantidade)
        ProdutoEncomendado.atualiza_estoque(produto, quantidade)

    def get_quantidade(self):
        return self.__valor

    def get_valorunitario(self):
        return self.__valor

    def get_valor(self):
        return self.__valor

encomenda1 = Encomenda()
encomendaitem1 = EncomendaItem(encomenda1, produto1, 5)
encomendaitem2 = EncomendaItem(encomenda1, produto2, 10)
encomendaitem3 = EncomendaItem(encomenda1, produto3, 20)
Encomenda.concluir_encomenda(encomenda1)

Encomenda.get_data(encomenda1)

Encomenda.get_valor(encomenda1)

Encomenda.get_situacao(encomenda1)

Produto.get_estoque(produto1)

Produto.get_estoque(produto2)

Produto.get_estoque(produto3)

## Use case e Sequencia

class Cliente(ABC):
  
    def __init__(self, nome, contato):
        self.nome = nome
        self.contato = contato
        self.__saldo = 0
        self.__pago = 0

    def get_saldo(self):
        return self.__saldo

    def set_saldo(self, saldo):
        self.__saldo = saldo

    def get_pago(self):
        return self.__pago

    def set_pago(self, pago):
        self.__pago = pago

    # def atualiza_saldo(self, operacao, desconto, valor):
    #     if operacao == 'pedido':    
    #         self.__saldo = self.__saldo + desconto
    #     elif operacao == 'pagamento':
    #         self.__saldo = self.__saldo - desconto
    #         self.__pago = self.__pago + valor

    @abstractmethod
    def atualiza_saldo(self, desconto, valor):
        pass

class NovoCliente(Cliente):

    def atualiza_saldo(self, desconto, valor):
        pass

class ClientePedido(Cliente):

    def atualiza_saldo(self, desconto, valor):
        self.set_saldo(self.get_saldo() + desconto)

class ClientePagamento(Cliente):

    def atualiza_saldo(self, desconto, valor):
        self.set_saldo(self.get_saldo() - desconto)
        self.set_pago(self.get_pago() + valor)



cliente1 = NovoCliente('João da Silva', '(47) 99999-9999')

class Pedido():

    def __init__(self, cliente):
        self.cliente = cliente
        self.__data = dt.date.today()
        self.__valor = 0.00
        self.__desconto = 0.00
        self.__situacao = 'Aberto'
        self.__vencimento = dt.date.today() + relativedelta(days=10)
        self.__pago = 0.00

    def get_data(self):
        return self.__data    

    def get_valor(self):
        return self.__valor    

    def get_desconto(self):
        return self.__valor    

    def get_situacao(self):
        return self.__situacao   

    def get_vencimento(self):
        return self.__vencimento   

    def get_pago(self):
        return self.__pago   

    def atualiza_valor(self, valor, desconto):
        self.__valor += valor
        self.__desconto += desconto

    def concluir_pedido(self):
        ClientePedido.atualiza_saldo(
            self.cliente, 
            self.get_desconto(), 
            self.get_valor()
        )
        self.__situacao = 'Fechado'

    def pagamento(self):
        if self.get_vencimento() > dt.date.today():
            ClientePagamento.atualiza_saldo(
                self.cliente, self.get_desconto(), self.get_valor()
                )
        else:
            ClientePagamento.atualiza_saldo(
                self.cliente, self.get_desconto(), self.get_desconto()
            )

class PedidoItem():

    def __init__(self, pedido, produto, quantidade):
        self.pedido = pedido
        self.produto = produto
        self.__quantidade = quantidade
        self.__valorunitario = produto.get_valorunitario()
        self.__valor = quantidade * produto.get_valorunitario()
        Pedido.atualiza_valor(pedido, self.__valor, self.__valor * (1 - produto.categoria.get_desconto()))
        ProdutoVendido.atualiza_estoque(produto, quantidade)

    def get_quantidade(self):
        return self.__quantidade

    def get_valorunitario(self):
        return self.__valorunitario

    def get_valor(self):
        return self.__valor

pedido1 = Pedido(cliente1)
pedidoitem1 = PedidoItem(pedido1, produto1, 2)
pedidoitem2 = PedidoItem(pedido1, produto2, 3)
pedidoitem3 = PedidoItem(pedido1, produto3, 1)
Pedido.concluir_pedido(pedido1)
Pedido.pagamento(pedido1)

## Métodos abstratos: pagamento no prazo ou vencido
## Classes Abstratas: Encomenda / Pedido

## DESAFIO: Pagamentos em parcelas

"""ENCOMENDA DE PLACAS

Um empresário resolveu contratar você para implementar um sistema de encomenda de placas. Atualmente ele anota as informações das encomendas no seu caderno com nome e contato dos clientes.
Para cada encomenda, ele anota o tamanho da placa (largura x altura, o material da placa, a frase a ser escrita, cor de fundo da placa, cor da frase, data de encomenda e a data de entrega.
O valor do serviço é calculado pelo valor da placa = ((largura x altura) * custo do material)) + (numero de letras * valor por letra do material).
O empresário tem observado que os clientes pedem mais de uma placa por encomenda e há a necessidade de desconto por faixa de valor. Ele ainda necessita saber o saldo devedor dos clientes, registrando a data e o valor pago em cada pedido. 
"""